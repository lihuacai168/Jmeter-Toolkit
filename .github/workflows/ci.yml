name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop, feature/* ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio httpx

    - name: Set up test environment
      run: |
        export ENVIRONMENT=testing
        export DATABASE_URL=sqlite:///./test.db
        export DEBUG=true
        echo "Test environment configured"

    - name: Create test directories
      run: |
        mkdir -p jmx_files jtl_files reports static templates

    - name: Run security tests
      run: |
        python -m pytest tests/test_security.py -v --tb=short

    - name: Run API tests
      run: |
        python -m pytest tests/test_api.py -v --tb=short

    - name: Run enhanced API tests
      run: |
        python -m pytest tests/test_api_enhanced.py -v --tb=short

    - name: Run full test suite with coverage
      run: |
        python -m pytest tests/ -v --cov=. --cov-report=xml --cov-report=term-missing --tb=short

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy
        pip install -r requirements.txt

    - name: Run flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Check code formatting with black
      run: |
        black --check --diff .

    - name: Check import sorting with isort
      run: |
        isort --check-only --diff .

    - name: Type checking with mypy
      run: |
        mypy . --ignore-missing-imports --no-strict-optional
      continue-on-error: true

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install security dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
        pip install -r requirements.txt

    - name: Run bandit security scan
      run: |
        bandit -r . -f json -o bandit-report.json
      continue-on-error: true

    - name: Run safety check
      run: |
        safety check --json --output safety-report.json
      continue-on-error: true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  docker:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [test, lint]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image for testing
      run: |
        docker build -f Dockerfile.ci -t jmeter-toolkit:ci-test .

    - name: Test Docker image
      run: |
        docker run --rm -d --name ci-test-container -p 8001:8000 jmeter-toolkit:ci-test
        echo "Waiting for container to be healthy..."
        SUCCESS=false
        for i in {1..30}; do
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8001/health || true)
          if [ "$HTTP_STATUS" = "200" ] || [ "$HTTP_STATUS" = "503" ]; then
            echo "‚úÖ Docker health check passed with status: $HTTP_STATUS"
            SUCCESS=true
            break
          fi
          echo "Attempt $i/30: Health check failed with status $HTTP_STATUS. Retrying in 2 seconds..."
          sleep 2
        done
        docker stop ci-test-container
        if [ "$SUCCESS" = "false" ]; then
          echo "‚ùå Docker health check failed after multiple retries."
          exit 1
        fi

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test]

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_USER: testuser
          POSTGRES_DB: jmeter_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio httpx

    - name: Set up integration test environment
      run: |
        export ENVIRONMENT=testing
        export DATABASE_URL=postgresql://testuser:testpass@localhost:5432/jmeter_test
        export DEBUG=true
        mkdir -p jmx_files jtl_files reports static templates

    - name: Run integration tests
      run: |
        DATABASE_URL=postgresql://testuser:testpass@localhost:5432/jmeter_test python -m pytest tests/test_api.py tests/test_security.py -v --tb=short

    - name: Test application startup
      run: |
        export ENVIRONMENT=development
        export DATABASE_URL=sqlite:///./startup_test.db
        timeout 30s python main.py &
        sleep 5
        # Test health endpoint - accept both 200 and 503 (some services may be unavailable in CI)
        HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/health)
        if [ "$HTTP_STATUS" != "200" ] && [ "$HTTP_STATUS" != "503" ]; then
          echo "‚ùå Health check failed with status: $HTTP_STATUS"
          exit 1
        fi
        echo "‚úÖ Health check passed with status: $HTTP_STATUS"
        pkill -f "python main.py" || true

  deployment-ready:
    name: Deployment Ready Check
    runs-on: ubuntu-latest
    needs: [test, lint, security, docker, integration]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check deployment readiness
      run: |
        echo "‚úÖ All tests passed"
        echo "‚úÖ Code quality checks passed"
        echo "‚úÖ Security scans completed"
        echo "‚úÖ Docker build successful"
        echo "‚úÖ Integration tests passed"
        echo "üöÄ Ready for deployment!"

    - name: Create deployment artifact
      run: |
        tar -czf jmeter-toolkit-deployment.tar.gz \
          --exclude='.git' \
          --exclude='__pycache__' \
          --exclude='*.pyc' \
          --exclude='.pytest_cache' \
          --exclude='htmlcov' \
          --exclude='*.db' \
          --exclude='jmx_files' \
          --exclude='jtl_files' \
          --exclude='venv' \
          .

    - name: Upload deployment artifact
      uses: actions/upload-artifact@v4
      with:
        name: jmeter-toolkit-deployment
        path: jmeter-toolkit-deployment.tar.gz
        retention-days: 30
